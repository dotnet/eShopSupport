@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@using eShopSupport.ServiceDefaults.Clients.Backend
@using eShopSupport.StaffWebUI.Components.Pages.Tickets.Columns
@inject BackendClient Backend
@inject NavigationManager Nav

<Title>Tickets</Title>

<div class="tickets-page ensure-page-scrollbar">
    <TicketsFilter />
    <QuickGrid TGridItem="ListTicketsResultItem" ItemKey="@(t => t.TicketId)" Virtualize="true" ItemSize="34" ItemsProvider="@TicketsProvider" Class="tickets-grid">
        <ChildContent>
            <LinkPropertyColumn Href="@TicketHref" Title="#" Property="@(t => t.TicketId)" Sortable="true" Align="Align.Center" Class="ticket-id" IsDefaultSortColumn="true" />
            <LinkPropertyColumn Href="@TicketHref" Title="Customer" Property="@(t => t.CustomerFullName)" Sortable="true" Class="ticket-customer" />
            <LinkTemplateColumn Href="@TicketHref" Title="Summary" Class="ticket-summary">
                @TicketTypeIcon(context)
                <span class="spacer"></span>
                @context.ShortSummary
            </LinkTemplateColumn>
            <LinkTemplateColumn Href="@TicketHref" Title="Satisfaction" Align="Align.Center" SortBy="@SortBySatisfaction" Class="ticket-satisfaction">
                <SatisfactionIndicator Satisfaction="@context.CustomerSatisfaction" />
            </LinkTemplateColumn>
            <LinkPropertyColumn Href="@TicketHref" Title="Messages" Property="@(t => t.NumMessages)" Sortable="true" Align="Align.Center" Class="ticket-messages" />
        </ChildContent>
    </QuickGrid>
</div>

@code {
    private readonly GridItemsProvider<ListTicketsResultItem> TicketsProvider;
    private readonly static Func<ListTicketsResultItem, string> TicketHref = t => $"ticket/{t.TicketId}";
    private readonly static GridSort<ListTicketsResultItem> SortBySatisfaction = GridSort<ListTicketsResultItem>.ByAscending(x => x.CustomerSatisfaction);

    public Tickets()
    {
        TicketsProvider = async request =>
        {
            var sortColumn = request.GetSortByProperties().FirstOrDefault();
            var result = await Backend.ListTicketsAsync(request.StartIndex, request.Count ?? 100, sortColumn.PropertyName, sortColumn.Direction == SortDirection.Ascending);
            return new() { Items = result.Items, TotalItemCount = result.TotalCount };
        };
    }

    static string TicketTypeIcon(ListTicketsResultItem ticket) => ticket.TicketType switch
    {
        TicketType.Idea => "💭",
        TicketType.Question => "❔",
        TicketType.Complaint => "👎",
        TicketType.Returns => "📦",
        _ => string.Empty,
    };
}
