@using Microsoft.FluentUI.AspNetCore.Components
@using eShopSupport.ServiceDefaults.Clients.Backend
@inject BackendClient Backend
<div class="filter">
    <FluentTabs Style="flex-grow: 1" @bind-ActiveTabId:get="@Filter.Status.ToString()" @bind-ActiveTabId:set="SetActiveTabId">
        <FluentTab Id="@TicketStatus.Open.ToString()" Label="@OpenLabel" Icon="@(new Icons.Regular.Size20.Mail())" />
        <FluentTab Id="@TicketStatus.Closed.ToString()" Label="@ClosedLabel" Icon="@(new Icons.Regular.Size20.Checkmark())" />
    </FluentTabs>

    <FluentAutocomplete Width="" TOption="FindCategoriesResult"
        @bind-SelectedOptions:get="@Filter.Categories" @bind-SelectedOptions:set="SetSelectedCategories"
        MaximumSelectedOptions="3" Placeholder="Filter by category" OptionText="@(x => x.Name)"
        OnOptionsSearch="LookupCategoriesAsync" style="min-width: 12rem;" />
</div>

@code {
    private IEnumerable<FindCategoriesResult> selectedCategories = Array.Empty<FindCategoriesResult>();

    [Parameter, EditorRequired]
    public Tickets.Filter Filter { get; set; } = default!;

    [Parameter]
    public EventCallback<Tickets.Filter> FilterChanged { get; set; }

    [Parameter]
    public int? TotalOpenCount { get; set; }

    [Parameter]
    public int? TotalClosedCount { get; set; }

    private string OpenLabel => $"{TotalOpenCount} Open";

    private string ClosedLabel => $"{TotalClosedCount} Closed";

    Task SetActiveTabId(string id)
        => FilterChanged.InvokeAsync(Filter with { Status = Enum.Parse<TicketStatus>(id) });

    async Task LookupCategoriesAsync(OptionsSearchEventArgs<FindCategoriesResult> args)
    {
        args.Items = !string.IsNullOrWhiteSpace(args.Text) ? await Backend.FindCategoriesAsync(args.Text) : [];
    }

    Task SetSelectedCategories(IEnumerable<FindCategoriesResult> values)
        => FilterChanged.InvokeAsync(Filter with { Categories = values });
}
